keys:
  key
  keys key

key:
  primitive
  user-defined-type

primitive:
  void
  boolean
  typecode
  number
  string
  blob

void:
  '!'

boolean:
  '$'  // False
  '%'  // True

primitive-typecode:
  '!'  // void
  '#'  // boolean
  '/'  // typecode
  '='  // number
  '?'  // string
  '}'  // blob

user-defined-typecode:
  char(0x40 -> 0x5F)  // [@-_]
  char(0x60 -> 0x7C) user-defined-typecode // [`-|]

typecode:
  '/' primitive-typecode
  '/' user-defined-typecode

regular-magnitude-specifier:
  char(0x20 -> 0x3F)  // [ -?]
  char(0x40 -> 0x5F) magnitude-specifier  // [@-_]

complement-magnitude-specifier:
  char(0x20 -> 0x3F) magnitude-specifier  // [ -?]
  char(0x40 -> 0x5F)  // [@-_]

hex-character:
  char(0x30 -> 0x39)  // [0-9]
  char(0x41 -> 0x46)  // [A-F]

integer-hex-encoding:
  hex-character hex-character

regular-integer:
  regular-magnitude-specifier<count> integer-hex-encoding[count]

non-zero-regular-integer:
  regular-integer

non-zero-or-one-regular-integer:
  regular-integer

complement-integer:
  complement-magnitude-specifier<count> integer-hex-encoding[count]

non-zero-complement-integer:
  complement-integer

non-zero-or-one-complement-integer:
  complement-integer

integer-list:
  non-zero-or-one-complement-integer '~'
  non-zero-complement-integer non-zero-or-one-regular-integer '\t'
  non-zero-complement-integer non-zero-regular-integer integer-list

negative-number:
  '<' complement-integer '\t'
  '<' complement-integer integer-list

positive-number:
  '>' regular-integer '\t'
  '>' regular-integer integer-list

number:
  negative-number
  positive-number

escaped-utf-8:
  '\t' '~' escaped-utf-8
  printable-non-tab-char escaped-utf-8

string:
  '?' escaped-utf-8 '\t'

base64-character:
  char(0x41 -> 0x5A)  // [A-Z]
  char(0x61 -> 0x7A)  // [a-z]
  char(0x30 -> 0x39)  // [0-9]
  '+'  // or '-' for base64url
  '/'  // or '_' for base64url

base64-last-word:
  base64-character base64-character '=' '='
  base64-character base64-character base64-character '='
  base64-character base64-character base64-character base64-character

base64-word:
  base64-character base64-character base64-character base64-character

base64-words:
  base64-last-word '\t`
  base64-word base64-words

base64:
  '\t'
  base64-words

blob
  '}' base64

user-defined:
  user-defined-typecode '\t'
  user-defined-typecode keys '\t'

